close all
clear all
clc
tic 

%% input (choose one)

your_choice = 1;
switch (your_choice)

    case 1 % food web -> 0.19        
           % https://www.nceas.ucsb.edu/interactionweb/html/thomps_towns.html 
        G = importdata('./Narrowdaletxt.txt', '\t');
        A = sparse(1*(G>0));
        clear G;
        
    case 2 % food web -> 0.41
           % https://snap.stanford.edu/data/Florida-bay.html 
        G = importdata('./Florida-bay.txt', ' ', 5);
        G.data = G.data + 1;
        N = max(max(G.data));
        A = sparse(G.data(:,2),G.data(:,1),ones(size(G.data,1),1),N,N);
        clear G;

    case 3 % food web -> 0.28
           % https://www.nceas.ucsb.edu/interactionweb/html/carpinteria.html 
        G = importdata('./carpinteria.txt', '	');
        A = sparse(1*(G(1:83,1:83)>0));
        N = size(A,1);
        clear G;

    case 4 % email network -> 0.26
           % https://snap.stanford.edu/data/email-Eu-core.html
        G = importdata('./email-Eu-core.txt', ' ');
        G = G+1;
        N = max(max(G));
        A = sparse(G(:,2),G(:,1),ones(size(G,1),1),N,N);
        clear G;

    case 5 % citation network (reduced size) -> 0.003
           % https://aminer.org/citation 
           % generated by files: 
           %    citation_step1.m = extracts network
           %    citation_step2.m = extracts smaller sub-network
        load('adjacency_matrix2.mat')
        
%     case 6 % citation network (full size) -> 0.003 (very very slow !!!)
%            % https://aminer.org/citation 
%            % generated by file: 
%            %    citation_step1.m = extracts network
%         load('adjacency_matrix.mat')

    otherwise % in case you wish to partition the community detected 
              % in the previous run
        load('previous_community');
        
end


%% pre-processing

Au = 1*(A+A'>0); % undirected network
Au = Au - diag(diag(Au)); % clear diagonal (you never know)

% remove nodes which are NOT connected
pos = find(sum(Au)~=0);
A = A(pos,pos);
Au = Au(pos,pos);
N = size(Au,1);


%spy(Au)
%% Build the normalized laplacian
d = Au*ones(N,1);
D = sparse(diag(1./sqrt(d)));
I = spdiags(ones(N,1),0,N,N);
L = I - D*Au*D;

%% Extract/plot Eigenvalues
eig_val = eig(full(L));
figure
figure (1);
plot(eig_val, '+')
grid
hold on
sa = eigs(L,3,'smallestabs');
plot(sa,'ro')
hold off
title('Eigenvalues (of the normalized Laplacian)')
legend('All eigenvalues','Smallest magnitude')
xlabel('i')
ylabel('\lambda_{i}')

%% Fidler Vector
[eigen_vectors,eigen_values] = eigs(L,3,'smallestabs');
eigen_vector_norm = D*eigen_vectors(:,2:end);
eigen_vector_norm = normalize(eigen_vector_norm);
figure (2);
plot(eigen_vector_norm(:,1),eigen_vector_norm(:,2),'-o');
grid


%% %%%%%% ASSIGNMENT B %%%%%%%%% %%
% Ordering nodes due to Fidler's Vector
[ei_sorted, ei_order] = sort(eigen_vector_norm(:,1));
ordered_Au = Au(ei_order,ei_order);

%% Sweep Across the nodes
di = ordered_Au*ones(N,1);
Di = diag(di);
Association = cumsum(di);
ai = sum(triu(full(ordered_Au)),2);
bi = sum(triu(full(ordered_Au)),1);
Cut = cumsum(bi - ai');
Conductance = Cut/min(Association,Di-Association);

%% Plot the result
figure (3);
plot(Conductance,'-+');
grid
hold on
[minCon,minIdx] = min(Conductance);
plot(minIdx,minCon,'ro')
hold off
title('Conductance')
legend('Conductances','Minimum Conductance')
grid

%% Cheeger's Bound
Cheeger = sqrt(2*eigen_values(2,2));
